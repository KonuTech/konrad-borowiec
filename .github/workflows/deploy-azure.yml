name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  RESOURCE_GROUP: rg-konrad-portfolio
  CONTAINER_APP_NAME: konrad-portfolio
  REGISTRY_NAME: acrkonradportfolio2024  # Globally unique registry name
  IMAGE_NAME: konrad-portfolio

jobs:
  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Register Azure providers
      run: |
        az provider register --namespace Microsoft.App --wait
        az provider register --namespace Microsoft.OperationalInsights --wait
        az provider register --namespace Microsoft.ContainerRegistry --wait

    - name: Create Resource Group (if not exists)
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP }} \
          --location eastus \
          --output none || true

    - name: Create Azure Container Registry (if not exists)
      run: |
        az acr create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.REGISTRY_NAME }} \
          --sku Basic \
          --admin-enabled true \
          --location eastus \
          --output none || true

    - name: Get ACR credentials
      id: acr-creds
      run: |
        ACR_USERNAME=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "username" -o tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.REGISTRY_NAME }} --query "passwords[0].value" -o tsv)
        echo "::add-mask::$ACR_PASSWORD"
        echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ steps.acr-creds.outputs.username }}
        password: ${{ steps.acr-creds.outputs.password }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

    - name: Create Container Apps Environment (if not exists)
      run: |
        az containerapp env create \
          --name env-${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location eastus \
          --output none || true

    - name: Deploy Container App
      run: |
        # Check if container app exists
        if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
          echo "Updating existing Container App..."
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        else
          echo "Creating new Container App..."
          az containerapp create \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment env-${{ env.CONTAINER_APP_NAME }} \
            --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
            --registry-username ${{ steps.acr-creds.outputs.username }} \
            --registry-password ${{ steps.acr-creds.outputs.password }} \
            --target-port 5000 \
            --ingress external \
            --cpu 0.25 \
            --memory 0.5Gi \
            --min-replicas 0 \
            --max-replicas 10 \
            --env-vars "NODE_ENV=production" "SESSION_SECRET=${{ secrets.SESSION_SECRET }}"
        fi

    - name: Get application URL
      id: get-url
      run: |
        APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
        echo "fqdn=$APP_URL" >> $GITHUB_OUTPUT

    - name: Health Check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30

        # Health check with retry
        for i in {1..10}; do
          if curl -f "${{ steps.get-url.outputs.url }}/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Attempt $i: Health check failed, retrying in 30s..."
            sleep 30
          fi
        done

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📱 Application URL: ${{ steps.get-url.outputs.url }}"
        echo "🔍 Health Check: ${{ steps.get-url.outputs.url }}/health"
        echo "📊 Metrics: ${{ steps.get-url.outputs.url }}/api/metrics"
        echo "🐳 Image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"

    - name: Add deployment comment (for PRs)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Complete**\n\n📱 Preview: ${{ steps.get-url.outputs.url }}\n🔍 Health: ${{ steps.get-url.outputs.url }}/health\n\n🐳 Image: \`${{ env.IMAGE_NAME }}:${{ github.sha }}\``
          })

  # Security scan job (optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'